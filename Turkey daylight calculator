<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Turkey Sunlight Calculator</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.8.0/math.min.js"></script>
<style>
:root {
--primary: #3498db;
--secondary: #f39c12;
--background: #f5f5f5;
--text: #333;
--card-bg: #fff;
--border: #ddd;
}

.dark-mode {
--primary: #2980b9;
--secondary: #e67e22;
--background: #121212;
--text: #f5f5f5;
--card-bg: #1e1e1e;
--border: #333;
}

* {
margin: 0;
padding: 0;
box-sizing: border-box;
transition: background-color 0.3s, color 0.3s;
}

body {
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
background-color: var(--background);
color: var(--text);
line-height: 1.6;
}

.container {
max-width: 1200px;
margin: 0 auto;
padding: 20px;
}

header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 30px;
padding-bottom: 15px;
border-bottom: 1px solid var(--border);
}

h1 {
color: var(--primary);
font-size: 28px;
}

.toggle-container {
display: flex;
align-items: center;
}

.toggle {
position: relative;
display: inline-block;
width: 60px;
height: 30px;
margin-left: 10px;
}

.toggle input {
opacity: 0;
width: 0;
height: 0;
}

.slider {
position: absolute;
cursor: pointer;
top: 0;
left: 0;
right: 0;
bottom: 0;
background-color: #ccc;
transition: .4s;
border-radius: 30px;
}

.slider:before {
position: absolute;
content: "";
height: 22px;
width: 22px;
left: 4px;
bottom: 4px;
background-color: white;
transition: .4s;
border-radius: 50%;
}

input:checked + .slider {
background-color: var(--primary);
}

input:checked + .slider:before {
transform: translateX(30px);
}

.main-content {
display: grid;
grid-template-columns: 1fr;
gap: 30px;
}

@media (min-width: 768px) {
.main-content {
grid-template-columns: 1fr 1fr;
}
}

.card {
background-color: var(--card-bg);
border-radius: 10px;
box-shadow: 0 4px 8px rgba(0,0,0,0.1);
padding: 20px;
margin-bottom: 20px;
animation: fadeIn 0.5s;
}

@keyframes fadeIn {
from { opacity: 0; transform: translateY(10px); }
to { opacity: 1; transform: translateY(0); }
}

.map-container {
position: relative;
height: 400px;
overflow: hidden;
border-radius: 10px;
background-color: var(--card-bg);
margin-bottom: 20px;
}

.map-svg {
width: 100%;
height: 100%;
}

.turkey-outline {
fill: var(--card-bg);
stroke: var(--primary);
stroke-width: 2;
}

.marker {
cursor: pointer;
transition: all 0.3s ease;
}

.marker circle {
fill: var(--primary);
}

.marker text {
fill: var(--text);
font-size: 12px;
text-anchor: middle;
pointer-events: none;
}

.marker:hover circle,
.marker.active circle {
fill: var(--secondary);
r: 10;
}

.marker:hover text,
.marker.active text {
font-weight: bold;
}

.controls {
margin-bottom: 20px;
}

label {
display: block;
margin-bottom: 8px;
font-weight: 600;
}

input[type="date"], select, input[type="number"] {
width: 100%;
padding: 10px;
margin-bottom: 15px;
border: 1px solid var(--border);
border-radius: 5px;
background-color: var(--card-bg);
color: var(--text);
}

.result {
margin-top: 20px;
padding: 15px;
background-color: rgba(52, 152, 219, 0.1);
border-radius: 5px;
font-size: 18px;
text-align: center;
}

.chart-container {
position: relative;
margin-top: 20px;
height: 300px;
}

.tab-container {
margin-bottom: 15px;
}

.tabs {
display: flex;
border-bottom: 1px solid var(--border);
}

.tab {
padding: 10px 20px;
cursor: pointer;
background-color: transparent;
border: none;
color: var(--text);
font-weight: 600;
position: relative;
}

.tab.active {
color: var(--primary);
}

.tab.active::after {
content: '';
position: absolute;
bottom: -1px;
left: 0;
width: 100%;
height: 3px;
background-color: var(--primary);
}

.tab-content {
display: none;
padding: 20px 0;
animation: fadeIn 0.5s;
}

.tab-content.active {
display: block;
}

.explanation {
line-height: 1.8;
}

.explanation h3 {
margin-bottom: 15px;
color: var(--primary);
}

.equation {
font-family: 'Courier New', Courier, monospace;
background-color: rgba(52, 152, 219, 0.1);
padding: 10px;
border-radius: 5px;
margin: 10px 0;
overflow-x: auto;
}

.solar-panel-section {
margin-top: 20px;
padding-top: 20px;
border-top: 1px solid var(--border);
}

.hidden {
display: none;
}

.highlight {
color: var(--secondary);
font-weight: bold;
}

.footer {
text-align: center;
margin-top: 40px;
padding-top: 20px;
border-top: 1px solid var(--border);
font-size: 14px;
}

/* Responsive adjustments */
@media (max-width: 767px) {
.main-content {
grid-template-columns: 1fr;
}
.map-container {
height: 300px;
}
h1 {
font-size: 24px;
}
}

.explanation ul {
margin-left: 20px;
margin-bottom: 15px;
}
</style>
</head>
<body>
<div class="container">
<header>
<h1>Turkey Sunlight Calculator</h1>
<div class="toggle-container">
<span>Light</span>
<label class="toggle">
<input type="checkbox" id="dark-mode-toggle">
<span class="slider"></span>
</label>
<span>Dark</span>
</div>
</header>

<div class="main-content">
<div class="card">
<div class="map-container">
<svg class="map-svg" viewBox="0 0 800 500" preserveAspectRatio="xMidYMid meet">
<!-- Updated Turkey map image with proper positioning -->
<image href="https://www.sosyalciniz.net/wp-content/uploads/2022/03/turkiye-dilsiz-il-haritasi-iller-haritasi-dilsiz.png" class="map" width="100%" height="100%" preserveAspectRatio="xMidYMid meet"></image>

<!-- Adjusted city markers -->
<g class="marker active" id="istanbul-marker" data-city="Istanbul">
<circle cx="130" cy="130" r="8"></circle>
<text x="130" y="120">Istanbul</text>
</g>

<g class="marker" id="ankara-marker" data-city="Ankara">
<circle cx="285" cy="210" r="8"></circle>
<text x="285" y="200">Ankara</text>
</g>

<g class="marker" id="izmir-marker" data-city="Izmir">
<circle cx="60" cy="280" r="8"></circle>
<text x="60" y="270">Izmir</text>
</g>
</svg>
</div>

<div class="controls">
<label for="city-select">Selected City:</label>
<select id="city-select">
<option value="Istanbul">Istanbul</option>
<option value="Ankara">Ankara</option>
<option value="Izmir">Izmir</option>
</select>

<label for="date-input">Select Date:</label>
<input type="date" id="date-input">

<div class="solar-panel-section">
<h3>Solar Panel Estimation</h3>
<label for="solar-efficiency">Solar Panel Efficiency (%):</label>
<input type="number" id="solar-efficiency" min="1" max="100" value="20">

<label for="panel-area">Solar Panel Area (m²):</label>
<input type="number" id="panel-area" min="0.1" value="2">
</div>
</div>
</div>

<div class="card">
<div class="tab-container">
<div class="tabs">
<button class="tab active" data-tab="results">Results</button>
<button class="tab" data-tab="explanation">How It Works</button>
</div>

<div id="results" class="tab-content active">
<div class="result" id="daylight-result">
Please select a city and date
</div>

<div class="chart-container">
<canvas id="daylight-chart"></canvas>
</div>

<div class="result" id="solar-result">

</div>
</div>

<div id="explanation" class="tab-content">
<div class="explanation">
<h3>How Daylight is Calculated</h3>
<p>The amount of daylight a location receives follows a sinusoidal pattern throughout the year, with the longest day at the summer solstice and the shortest at the winter solstice.</p>

<p>The basic equation for daylight hours (H) is:</p>
<div class="equation">
H = H_avg + A × sin(2π × (d - d_min)/365.25)
</div>

<p>Where:</p>
<ul>
<li><strong>H_avg</strong> is the average daylight hours (≈12 hours)</li>
<li><strong>A</strong> is the amplitude (varies by latitude)</li>
<li><strong>d</strong> is the day of the year</li>
<li><strong>d_min</strong> is the day of the winter solstice</li>
</ul>

<p>The amplitude (A) increases with latitude, which is why places further from the equator experience more extreme differences between summer and winter daylight hours.</p>

<h3>Latitude Effect</h3>
<p>For Turkey's cities:</p>
<ul>
<li><strong>Istanbul (41.0°N)</strong>: Greater variation in daylight hours</li>
<li><strong>Ankara (39.9°N)</strong>: Moderate variation</li>
<li><strong>Izmir (38.4°N)</strong>: Less variation, closer to the equator</li>
</ul>
</div>
</div>
</div>
</div>
</div>

<div class="footer">
<p>© 2025 Turkey Sunlight Calculator | Using sinusoidal functions to model natural phenomena</p>
</div>
</div>

<script>
// City data with coordinates and latitude
const cityData = {
"Istanbul": { lat: 41.0082, lng: 28.9784 },
"Ankara": { lat: 39.9334, lng: 32.8597 },
"Izmir": { lat: 38.4237, lng: 27.1428 }
};

// Initialize variables
let selectedCity = "Istanbul";
let selectedDate = new Date();
let chart = null;

// DOM elements
const darkModeToggle = document.getElementById('dark-mode-toggle');
const citySelect = document.getElementById('city-select');
const dateInput = document.getElementById('date-input');
const solarEfficiency = document.getElementById('solar-efficiency');
const panelArea = document.getElementById('panel-area');
const daylightResult = document.getElementById('daylight-result');
const solarResult = document.getElementById('solar-result');
const markers = document.querySelectorAll('.marker');
const tabs = document.querySelectorAll('.tab');
const tabContents = document.querySelectorAll('.tab-content');

// Set default date to today
const today = new Date();
const dateString = today.toISOString().split('T')[0];
dateInput.value = dateString;

// Initialize the chart
function initChart() {
const ctx = document.getElementById('daylight-chart').getContext('2d');
chart = new Chart(ctx, {
type: 'line',
data: {
labels: [],
datasets: [{
label: 'Daylight Hours',
data: [],
borderColor: '#3498db',
backgroundColor: 'rgba(52, 152, 219, 0.1)',
borderWidth: 2,
fill: true,
tension: 0.4
}]
},
options: {
responsive: true,
maintainAspectRatio: false,
scales: {
x: {
grid: {
color: 'rgba(200, 200, 200, 0.2)'
},
ticks: {
color: function() {
return darkModeToggle.checked ? '#f5f5f5' : '#333';
}
}
},
y: {
beginAtZero: false,
grid: {
color: 'rgba(200, 200, 200, 0.2)'
},
ticks: {
color: function() {
return darkModeToggle.checked ? '#f5f5f5' : '#333';
}
}
}
},
plugins: {
legend: {
labels: {
color: function() {
return darkModeToggle.checked ? '#f5f5f5' : '#333';
}
}
},
tooltip: {
backgroundColor: function() {
return darkModeToggle.checked ? '#333' : 'rgba(255, 255, 255, 0.9)';
},
titleColor: function() {
return darkModeToggle.checked ? '#fff' : '#333';
},
bodyColor: function() {
return darkModeToggle.checked ? '#fff' : '#333';
},
borderColor: function() {
return darkModeToggle.checked ? '#555' : '#ddd';
},
borderWidth: 1
}
}
}
});
}

// Calculate daylight hours using sine function
function calculateDaylight(date, latitude) {
// Get day of year (0-365)
const start = new Date(date.getFullYear(), 0, 0);
const diff = date - start;
const dayOfYear = Math.floor(diff / 86400000);

// Average daylight hours (12 hours)
const avgDaylight = 12;

// Amplitude based on latitude (higher amplitude for higher latitudes)
// This is a simplified model - actual calculation is more complex
const amplitude = 2.25 * Math.sin(Math.abs(latitude) * Math.PI / 180);

// Winter solstice is around day 355 (Dec 21)
const winterSolstice = 355;

// Calculate phase shift to align with solstices
const phaseShift = (dayOfYear - winterSolstice + 365) % 365;

// Calculate daylight hours using sine function
const daylight = avgDaylight + amplitude * Math.sin((2 * Math.PI * phaseShift / 365) - Math.PI/2);

return Math.round(daylight * 100) / 100; // Round to 2 decimal places
}

// Calculate solar panel energy output
function calculateSolarEnergy(daylightHours, efficiency, area) {
// Average solar irradiance in Turkey (kW/m²)
const avgIrradiance = 4.5;

// Seasonal factor (more effective in summer)
const date = new Date(dateInput.value);
const start = new Date(date.getFullYear(), 0, 0);
const diff = date - start;
const dayOfYear = Math.floor(diff / 86400000);
const seasonalFactor = 1 + 0.2 * Math.sin(2 * Math.PI * (dayOfYear - 80) / 365);

// Calculate energy in kWh
const energy = avgIrradiance * (efficiency / 100) * area * daylightHours * seasonalFactor;

return Math.round(energy * 100) / 100; // Round to 2 decimal places
}

// Update the graph with yearly data
function updateYearlyGraph(city) {
const latitude = cityData[city].lat;
const currentYear = new Date().getFullYear();
const labels = [];
const data = [];

// Generate data for each month
for (let month = 0; month < 12; month++) {
const date = new Date(currentYear, month, 15);
const monthName = date.toLocaleString('default', { month: 'short' });
labels.push(monthName);
data.push(calculateDaylight(date, latitude));
}

// Update chart data
chart.data.labels = labels;
chart.data.datasets[0].data = data;
chart.data.datasets[0].label = `Daylight Hours in ${city}`;
chart.update();
}

// Update results based on selected city and date
function updateResults() {
const city = citySelect.value;
const date = new Date(dateInput.value);
const latitude = cityData[city].lat;

// Calculate daylight hours
const daylightHours = calculateDaylight(date, latitude);

// Update result display
const formattedDate = date.toLocaleDateString('en-US', {
weekday: 'long',
year: 'numeric',
month: 'long',
day: 'numeric'
});

daylightResult.innerHTML = `
<div>On <span class="highlight">${formattedDate}</span> in <span class="highlight">${city}</span>:</div>
<div style="font-size: 28px; margin: 10px 0;">${daylightHours} hours of daylight</div>
`;

// Calculate solar panel output if values are provided
const efficiency = parseFloat(solarEfficiency.value);
const area = parseFloat(panelArea.value);

if (!isNaN(efficiency) && !isNaN(area)) {
const energy = calculateSolarEnergy(daylightHours, efficiency, area);
solarResult.innerHTML = `
<div style="font-size: 14px; margin-top: 20px;">
With ${efficiency}% efficient solar panels covering ${area}m²:
</div>
<div style="font-size: 24px; margin: 5px 0;">
Estimated energy: <span class="highlight">${energy} kWh</span>
</div>
`;
} else {
solarResult.innerHTML = "";
}

// Update graph
updateYearlyGraph(city);

// Update active city marker
markers.forEach(marker => {
if (marker.dataset.city === city) {
marker.classList.add('active');
} else {
marker.classList.remove('active');
}
});
}

// Update map colors based on theme
function updateMapColors(isDarkMode) {
const turkeyOutline = document.querySelector('.turkey-outline');
const markerTexts = document.querySelectorAll('.marker text');

if (isDarkMode) {
turkeyOutline.setAttribute('fill', '#1e1e1e');
markerTexts.forEach(text => {
text.setAttribute('fill', '#f5f5f5');
});
} else {
turkeyOutline.setAttribute('fill', '#fff');
markerTexts.forEach(text => {
text.setAttribute('fill', '#333');
});
}
}

// Event Listeners
darkModeToggle.addEventListener('change', function() {
const isDarkMode = this.checked;
document.body.classList.toggle('dark-mode', isDarkMode);
updateMapColors(isDarkMode);
if (chart) {
chart.update();
}
});

citySelect.addEventListener('change', function() {
selectedCity = this.value;
updateResults();
});

dateInput.addEventListener('change', function() {
updateResults();
});

solarEfficiency.addEventListener('input', function() {
updateResults();
});

panelArea.addEventListener('input', function() {
updateResults();
});

// City marker click events
markers.forEach(marker => {
marker.addEventListener('click', function() {
const city = this.dataset.city;
citySelect.value = city;
selectedCity = city;
updateResults();
});
});

// Tab switching
tabs.forEach(tab => {
tab.addEventListener('click', function() {
const tabId = this.dataset.tab;

// Update active tab
tabs.forEach(t => t.classList.remove('active'));
this.classList.add('active');

// Show selected tab content
tabContents.forEach(content => {
content.classList.remove('active');
if (content.id === tabId) {
content.classList.add('active');
}
});
});
});

// Initialize app
function initApp() {
initChart();
updateResults();
updateMapColors(darkModeToggle.checked);
}

// Start app when DOM is loaded
document.addEventListener('DOMContentLoaded', initApp);
</script>
</body>
</html>
